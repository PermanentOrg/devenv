services:
  load_balancer:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/ssl:ro
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      stela:
        condition: service_healthy
      web-app:
        # TODO -> update condition to healty
        condition: service_started
  web-app:
    build:
      context: ../
      dockerfile: web-app/Dockerfile.dev
      args:
        # these args are available because of the .env file located next to the docker-compose.yml file
        # which is automatically incorporated by docker
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        AWS_ACCESS_SECRET: ${AWS_ACCESS_SECRET}
        AWS_REGION: ${AWS_REGION}
    image: web-app
    depends_on:
      database:
        condition: service_healthy
  back-end:
    build:
      context: ../
      dockerfile: back-end/Dockerfile.dev3
      # TODO -> see if args are needed
      args:
        # these args are available because of the .env file located next to the docker-compose.yml file
        # which is automatically incorporated by docker
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        AWS_ACCESS_SECRET: ${AWS_ACCESS_SECRET}
        AWS_REGION: ${AWS_REGION}
        SQS_IDENT: ${SQS_IDENT}
    image: back-end
    env_file:
      # env file path seems relative to docker-compose file
      - ./.env
    volumes:
      - ../back-end/api:/data/www/api
      # - ../back-end/library:/data/www/library
    depends_on:
      database:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "2.0"
        reservations:
          cpus: "1.0"
  stela:
    restart: always
    build:
      context: ../stela
      dockerfile: packages/api/Dockerfile.dev
    ports:
      - "8080:8080"
    env_file:
      - ../stela/.env
    volumes:
      - ../stela:/usr/local/apps/stela/
      - ignore_module:/usr/local/apps/stela/node_modules
      - ignore_api:/usr/local/apps/stela/packages/api/node_modules
      - ignore_logger:/usr/local/apps/stela/packages/logger/node_modules
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost:8080/api/v2/health
  cache:
    image: memcached:1.5.6-alpine
    ports:
      - "11211:11211"
  database:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: permanent
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d permanent'"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
  database_setup:
    image: postgres:14-alpine
    volumes:
      - ../stela/database/base.sql:/base.sql:ro
      - ../back-end/library/db:/db:ro
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "SELECT 'CREATE DATABASE permanent' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'permanent')\gexec" | psql postgresql://postgres:permanent@database:5432
        psql postgresql://postgres:permanent@database:5432/permanent -f /base.sql
        apk add curl
        curl -L -o /usr/local/bin/dbmate https://github.com/amacneil/dbmate/releases/download/v1.16.0/dbmate-linux-amd64
        chmod +x /usr/local/bin/dbmate
        (dbmate --url postgresql://postgres:permanent@database:5432/permanent?sslmode=disable up)
    depends_on:
      database:
        condition: service_healthy
volumes:
  ignore_module:
  ignore_api:
  ignore_logger:
